name: Gitleaks Secret Scan

on:
  pull_request:
    branches:
      - develop

jobs:
  gitleaks-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create Custom Gitleaks Config
        run: |
          cat > .gitleaks.toml << 'EOF'
          # Enable default rules
          [extend]
          useDefault = true
          
          # Custom rules for environment variables and secrets
          [[rules]]
          id = "hardcoded-env-vars"
          description = "Hardcoded environment variables"
          regex = '''(?i)(api_key|secret_key|access_key|private_key|token|password|auth|database_url|db_password|jwt_secret|encryption_key)\s*[=:]\s*["']?[a-zA-Z0-9_\-\.\/\+]{8,}["']?'''
          
          [[rules]]
          id = "env-file-patterns"
          description = "Environment file patterns"
          regex = '''(?i)^[A-Z_]+\s*=\s*.+$'''
          path = '''(?i)\.env.*'''
          
          [[rules]]
          id = "database-connections"
          description = "Database connection strings"
          regex = '''(?i)(mongodb|mysql|postgres|redis|sqlite)://[^\s"'\n\r]+'''
          
          [[rules]]
          id = "jwt-tokens"
          description = "JWT tokens"
          regex = '''eyJ[A-Za-z0-9_-]{10,}\.[A-Za-z0-9_-]{10,}\.[A-Za-z0-9_-]{10,}'''
          
          [[rules]]
          id = "base64-secrets"
          description = "Base64 encoded secrets"
          regex = '''(?i)(secret|key|token|password)\s*[=:]\s*["']?[A-Za-z0-9+/]{20,}={0,2}["']?'''
          
          [[rules]]
          id = "config-secrets"
          description = "Configuration file secrets"
          regex = '''(?i)(api|secret|key|token|password|auth)\s*[:=]\s*["']?[a-zA-Z0-9_\-\.]{10,}["']?'''
          path = '''(?i)\.(json|yaml|yml|toml|ini|conf|config)$'''
          
          # Allowlist common false positives
          [allowlist]
          description = "Allowlist for common false positives"
          paths = [
            '''(?i).*test.*''',
            '''(?i).*example.*''',
            '''(?i).*mock.*''',
            '''(?i).*dummy.*''',
          ]
          regexes = [
            '''(?i)password.*placeholder''',
            '''(?i)example.*key''',
            '''(?i)test.*secret''',
            '''(?i)dummy.*token''',
            '''(?i)fake.*password''',
            '''YOUR_API_KEY''',
            '''YOUR_SECRET''',
            '''REPLACE_WITH''',
            '''TODO''',
            '''FIXME''',
          ]
          EOF

      - name: Debug Repository Contents
        run: |
          echo "=== Repository Structure ==="
          find . -name "*.env*" -o -name "*.json" -o -name "*.yml" -o -name "*.yaml" -o -name "*.js" -o -name "*.ts" -o -name "*.py" | head -20
          echo ""
          echo "=== Looking for potential secrets in common files ==="
          grep -r -i -n "api_key\|secret\|password\|token" --include="*.js" --include="*.ts" --include="*.py" --include="*.json" --include="*.env*" . | head -10 || echo "No obvious secrets found with grep"

      - name: Run Gitleaks with Custom Config
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --source . --config .gitleaks.toml --report-path gitleaks-report.json --verbose --no-git --exit-code 0
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        continue-on-error: true

      - name: Alternative Direct Scan
        run: |
          echo "=== Running alternative direct file scan ==="
          # Install gitleaks directly for more control
          wget -q https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks_8.18.4_linux_x64.tar.gz
          tar -xzf gitleaks_8.18.4_linux_x64.tar.gz
          chmod +x gitleaks
          
          # Run with maximum verbosity and different options
          echo "Running gitleaks detect with full options..."
          ./gitleaks detect \
            --source . \
            --config .gitleaks.toml \
            --report-format json \
            --report-path gitleaks-direct-report.json \
            --verbose \
            --no-git \
            --exit-code 0 \
            --max-target-megabytes 1000 || echo "Direct scan completed with exit code $?"

      - name: Manual Pattern Search
        run: |
          echo "=== Manual pattern search for common secrets ==="
          
          # Search for common secret patterns
          echo "Searching for API keys..."
          grep -r -i -n -E "(api[_-]?key|apikey)\s*[=:]\s*[\"']?[a-zA-Z0-9_\-]{10,}[\"']?" --include="*.js" --include="*.ts" --include="*.py" --include="*.json" . | head -5 || echo "No API keys found"
          
          echo "Searching for secrets..."
          grep -r -i -n -E "(secret|token)\s*[=:]\s*[\"']?[a-zA-Z0-9_\-]{10,}[\"']?" --include="*.js" --include="*.ts" --include="*.py" --include="*.json" . | head -5 || echo "No secrets found"
          
          echo "Searching for passwords..."
          grep -r -i -n -E "password\s*[=:]\s*[\"']?[a-zA-Z0-9_\-]{4,}[\"']?" --include="*.js" --include="*.ts" --include="*.py" --include="*.json" . | head -5 || echo "No passwords found"
          
          echo "Searching for database URLs..."
          grep -r -i -n -E "(mongodb|mysql|postgres)://[^\s\"'\n\r]+" --include="*.js" --include="*.ts" --include="*.py" --include="*.json" . | head -5 || echo "No DB URLs found"

      - name: Check All Results
        run: |
          echo "=== Checking all scan results ==="
          
          # Check gitleaks action report
          if [ -f gitleaks-report.json ]; then
            echo "Gitleaks action report size: $(wc -c < gitleaks-report.json) bytes"
            if [ -s gitleaks-report.json ]; then
              echo "ðŸš¨ Gitleaks action found secrets:"
              cat gitleaks-report.json | jq '.' 2>/dev/null || cat gitleaks-report.json
              echo "SECRETS_FOUND=true" >> $GITHUB_ENV
            else
              echo "Gitleaks action report is empty"
            fi
          else
            echo "No gitleaks action report found"
          fi
          
          # Check direct scan report
          if [ -f gitleaks-direct-report.json ]; then
            echo "Gitleaks direct report size: $(wc -c < gitleaks-direct-report.json) bytes"
            if [ -s gitleaks-direct-report.json ]; then
              echo "ðŸš¨ Direct gitleaks scan found secrets:"
              cat gitleaks-direct-report.json | jq '.' 2>/dev/null || cat gitleaks-direct-report.json
              echo "SECRETS_FOUND=true" >> $GITHUB_ENV
            else
              echo "Direct scan report is empty"
            fi
          else
            echo "No direct scan report found"
          fi

      - name: Final Result
        run: |
          if [ "$SECRETS_FOUND" = "true" ]; then
            echo "ðŸš¨ SECRETS DETECTED IN REPOSITORY!"
            echo "Please review the reports and remove any hardcoded secrets."
            exit 1
          else
            echo "âœ… No secrets detected"
          fi

      - name: Upload All Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-reports
          path: |
            gitleaks-report.json
            gitleaks-direct-report.json
            .gitleaks.toml